Fetch:
https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
https://developer.mozilla.org/en-US/docs/Web/API/Response
The fetch() method is part of the Fetch API.
The fetch() method can be used within an async function which means that we will allow the data retrieval to happen before trying to continue with statements in our program that need to process the data. A promise for data is one thing, but the actual data is what is really needed, so we need a delay. Async/await provide that promised-based asynchronous behavior.
We need to extract the JSON content from the noise of the full HTTP response by using the json() method. With the string data retrieved, we can run a .json() method on the Response to convert it into a JavaScript object, which is easy to work with.
The fetch() method has built in error handling.
Read: Fetch Basics
    https://byui-cit.github.io/learning-modules/modules/js/fetch-basics/prepare1/

    const url = "https://pokeapi.co/api/v2/pokemon/ditto";
    const results = fetch(url);
    doStuff(results);

    Javascript would run the line with fetch. Results would get set to a Promise initially. Then the execution would move immediately on to the line doStuff(results) The problem is that our function expects results to be the data NOT a Promise! It won't work. We need a way to delay the execution of doStuff(results) UNTIL fetch finishes and the Promise resolves.

    The easiest way to do that is with async/await. Though it can also be done with the .then() method, Async/await code is more readable in general and easier to follow so we will use that method.

    So how do we use async/await? First, async/await can only be used in functions. This is very important. We must first declare a function as an asynchronous function with the async keyword, then put our code inside of that. This is not a big drawback since we really should have put this in a function anyway ;)

    Once we have done that we can instruct Javascript to delay moving to the next line by using the await keyword. 

    We have to tell fetch what we were expecting...and ask it to convert the response into the right kind of data. The three types it understands are json(), text() (HTML and XML would be considered text), and blob() (blob is anything that isn't text or json). We are expecting JSON back from the api we made the request to. So we should convert it to that.

    const url = "https://pokeapi.co/api/v2/pokemon/ditto";
    let results = null;
    async function getPokemon(url) {
    const response = await fetch(url);
    //check to see if the fetch was successful
    if (response.ok) {
        // the API will send us JSON...but we have to convert the response before we can use it
        // .json() also returns a promise...so we await it as well.
        const data = await response.json();
        doStuff(data);
    }
    }
    function doStuff(data) {
    results = data;
    console.log("first: ", results);
    }
    getPokemon(url);
    console.log("second: ", results);




json
https://jsonlint.com/
https://byui-cse.github.io/wdd230-course/lesson09/json.html
https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify


Forms:
https://designsystem.digital.gov/components/form/
https://www.w3schools.com/html/html_forms_attributes.asp
https://uxplanet.org/designing-more-efficient-forms-structure-inputs-labels-and-actions-e3a47007114f#.yncntsoyr

https://video.byui.edu/media/Web+Forms+B/0_jdu5mnzx
https://video.byui.edu/media/Web+Forms+C/0_3h97cgsf
https://video.byui.edu/media/Web+Forms+D/0_pcj60gc1
https://video.byui.edu/media/Web+Forms+E/0_rzx02f2n
    descriptive title - every form needs one.  Descriptive of what were doing
    Never use the word submit
        I want to..."    "
    Don't require information that isn't essential - don't look like your datamining.  be professional
    Clearly identify what is required
    Labels above and left aligned with input
    Keep eye tracking pattern simple.  Straight line to submission button
        Single Column format.  
    Use a Single input area for phone number (don't have seperate area for area code)
    Use Radio buttons for <5 choices
    Use dropdown for buttons for >5 choices
    Use Placehoder Text to reduce confusion.  Not a replacement for labels.  
    Order choices logically
        abc ordering, or locical ordering 
    Wrap all inputs in a Label - allows users to selec the label as well as input
        Wrapping inside of lable eliminates need for the "for=" attribute
    Don't use reset buttons
    Show a confirmation page.
    Anything that needs to be touched/interacted with needs min of 44px tall
    Group Related Items
        Keep labels close to it's input and padded away from others.
        Chunk large forms into groups.




    id all required fields
    lables above and left aligned
    phone number = single input
    items < 5 options not drop downs
    single column form
    placeholder text when appropriate
    logical ordering and sorting (alphabetical )
    Wrap all inputs in lable text so clicking labels selecsts the input
    keep labels close to input (proximity) so it's obvious what it applies to
    button height = 44px at a min
https://video.byui.edu/media/Web+Forms+F/0_s0xpkb7y


Input height must be minimum of 44px tall
Group related data
Chunk large forms using fieldsence

Local Storage:
https://developer.mozilla.org/en-US/docs/Web/API/Storage
https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API



DOM Manipulation in JS:
https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents



INTERVIEW PREP:
Learn the Cascade, Specificity, and Inheritance - Review 📄Cascade, specificity, and inheritance - MDN
Understand the CSS Rule-set - Can you identify all the parts of a CSS rule?
- selector, declaration block, declaration, property, value 🎦CSS Rule Set
Learn the difference between block, inline, and inline-block -
Learn the Box Model - Review: 🎦CSS Box Model in 60 Seconds!
Learn Flex - Review: CSS Flex Box in 100 Seconds
Learn Grid - Review: 🎦CSS Grid in 100 Seconds
Here is an example using auto-fill with Grid: ⚙️CSS Grid: repeat with auto-fill columns that have a min and max.
Responsive design using CSS Grid 🎦CSS Responsive Design using Grid - 1 segment.
Learn Positioning - This topic is reviewed and applied in next week's content.
Learn Clamp - Responsive design using clamp: 🎦Clamp - 1 segment
Learn aspect-ratio - aspect-ratio CSS property - MDN

https://byui-cse.github.io/wdd230-course/lesson04/css-common.html




Come back and work through all of these:
https://www.w3schools.com/css/exercise.asp?filename=exercise_combinators1


Psuedo_classes: (e.g. hover)
https://www.w3schools.com/css/css_pseudo_classes.asp


Centering content in it's container:
/* THIS centers the content.  1rem gives 1rem on top/bottom.  Auto centers it in it's container */
margin: 1rem auto;



Web Design:
https://dev.to/imiahazel/8-fundamental-principles-of-effective-web-design-196l

https://xd.adobe.com/ideas/process/information-architecture/visual-hierarchy-principles-examples/

https://www.youtube.com/watch?v=mOA0WH00reA


Reactive Website:
https://web.dev/responsive-web-design-basics/#how_to_choose_breakpoints



META TAGS

<!--  Essential META Tags -->
<!--<meta property="og:title" content="European Travel Destinations">
<meta property="og:type" content="article" />
<meta property="og:image" content="http://euro-travel-example.com/thumbnail.jpg">
<meta property="og:url" content="http://euro-travel-example.com/index.htm">
<meta name="twitter:card" content="summary_large_image">

 Non-Essential, But Recommended
<meta property="og:description" content="Offering tour packages for individuals or groups.">
<meta property="og:site_name" content="European Travel, Inc.">
<meta name="twitter:image:alt" content="Alt text for image">

 Non-Essential, But Required for Analytics
<meta property="fb:app_id" content="your_app_id" />
<meta name="twitter:site" content="@website-username">-->


<!-- https://developers.facebook.com/docs/sharing/webmasters#markup
-->

<!-- https://css-tricks.com/essential-meta-tags-social-media/
 -->